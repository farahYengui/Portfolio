{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport anime from 'animejs';\n//declare var anime: any;\nlet HomeComponent = class HomeComponent {\n  ngAfterViewInit() {\n    const textWrapper = document.querySelector('.hello');\n    if (textWrapper && textWrapper.textContent) {\n      const textNodes = Array.from(textWrapper.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);\n      textNodes.forEach(node => {\n        var _a;\n        const characters = (_a = node.textContent) === null || _a === void 0 ? void 0 : _a.split('');\n        if (characters) {\n          const wrappedText = characters.map(char => `<span class='letter'>${char}</span>`).join('');\n          const parsedNodes = new DOMParser().parseFromString(wrappedText, 'text/html').body.childNodes;\n          node.replaceWith(...Array.from(parsedNodes));\n        }\n      });\n      anime.timeline({\n        loop: true\n      }).add({\n        targets: '.hello .letter',\n        scale: [4, 1],\n        opacity: [0, 1],\n        translateZ: 0,\n        easing: \"easeOutExpo\",\n        duration: 950,\n        delay: (el, i) => 70 * i\n      }).add({\n        targets: '.hello',\n        opacity: 0,\n        duration: 1000,\n        easing: \"easeOutExpo\",\n        delay: 1000\n      });\n    }\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":";AAAA,SAAwBA,SAAS,QAA+B,eAAe;AAC/E,OAAOC,KAAK,MAAM,SAAS;AAE3B;AAQO,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAExBC,eAAe;IACb,MAAMC,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAEpD,IAAIF,WAAW,IAAIA,WAAW,CAACG,WAAW,EAAE;MAC1C,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACN,WAAW,CAACO,UAAU,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAKC,IAAI,CAACC,SAAS,CAAC;MACrGR,SAAS,CAACS,OAAO,CAACJ,IAAI,IAAG;;QACvB,MAAMK,UAAU,GAAG,UAAI,CAACX,WAAW,0CAAEY,KAAK,CAAC,EAAE,CAAC;QAC9C,IAAID,UAAU,EAAE;UACd,MAAME,WAAW,GAAGF,UAAU,CAACG,GAAG,CAACC,IAAI,IAAI,wBAAwBA,IAAI,SAAS,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;UAC1F,MAAMC,WAAW,GAAG,IAAIC,SAAS,EAAE,CAACC,eAAe,CAACN,WAAW,EAAE,WAAW,CAAC,CAACO,IAAI,CAAChB,UAAU;UAC7FE,IAAI,CAACe,WAAW,CAAC,GAAGnB,KAAK,CAACC,IAAI,CAACc,WAAW,CAAC,CAAC;;MAEhD,CAAC,CAAC;MACFvB,KAAK,CAAC4B,QAAQ,CAAC;QAAEC,IAAI,EAAE;MAAI,CAAE,CAAC,CAC3BC,GAAG,CAAC;QACHC,OAAO,EAAE,gBAAgB;QACzBC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACbC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACfC,UAAU,EAAE,CAAC;QACbC,MAAM,EAAE,aAAa;QACrBC,QAAQ,EAAE,GAAG;QACbC,KAAK,EAAE,CAACC,EAAO,EAAEC,CAAS,KAAK,EAAE,GAAGA;OACrC,CAAC,CAACT,GAAG,CAAC;QACLC,OAAO,EAAE,QAAQ;QACjBE,OAAO,EAAE,CAAC;QACVG,QAAQ,EAAE,IAAI;QACdD,MAAM,EAAE,aAAa;QACrBE,KAAK,EAAE;OACR,CAAC;;EAER;CACD;AAjCYpC,aAAa,eALzBF,SAAS,CAAC;EACTyC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWzC,aAAa,CAiCzB;SAjCYA,aAAa","names":["Component","anime","HomeComponent","ngAfterViewInit","textWrapper","document","querySelector","textContent","textNodes","Array","from","childNodes","filter","node","nodeType","Node","TEXT_NODE","forEach","characters","split","wrappedText","map","char","join","parsedNodes","DOMParser","parseFromString","body","replaceWith","timeline","loop","add","targets","scale","opacity","translateZ","easing","duration","delay","el","i","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\3gt\\tp web\\blog\\blog\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';\nimport anime from 'animejs';\n\n//declare var anime: any;\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements AfterViewInit {\n\n  ngAfterViewInit(): void {\n    const textWrapper = document.querySelector('.hello');\n\n    if (textWrapper && textWrapper.textContent) {\n      const textNodes = Array.from(textWrapper.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);\n      textNodes.forEach(node => {\n        const characters = node.textContent?.split('');\n        if (characters) {\n          const wrappedText = characters.map(char => `<span class='letter'>${char}</span>`).join('');\n          const parsedNodes = new DOMParser().parseFromString(wrappedText, 'text/html').body.childNodes;\n          node.replaceWith(...Array.from(parsedNodes));\n        }\n      });\n      anime.timeline({ loop: true })\n        .add({\n          targets: '.hello .letter',\n          scale: [4, 1],\n          opacity: [0, 1],\n          translateZ: 0,\n          easing: \"easeOutExpo\",\n          duration: 950,\n          delay: (el: any, i: number) => 70 * i\n        }).add({\n          targets: '.hello',\n          opacity: 0,\n          duration: 1000,\n          easing: \"easeOutExpo\",\n          delay: 1000\n        });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}